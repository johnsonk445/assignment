##3. ExecuteAnsibleplaybook

- name: Configure Auto Scaling Group and perform rolling deploy
  ec2_asg:
    region: "{{ region }}"
    name: "{{ asg_name }}"
    launch_config_name: "{{ lc_result.name }}"
    availability_zones: "{{ zone }}"
    health_check_type: EC2
    health_check_period: 300
#    desired_capacity: "{{ asg_properties_result.DesiredCapacity | default(2) }}"
    desired_capacity: "{{ instances_min }}"
    replace_all_instances: yes
    replace_batch_size: "{{ (asg_properties_result.DesiredCapacity | default(2) / 4) | round(0, 'ceil') | int }}"
    min_size: "{{ instances_min }}"
    max_size: "{{ instances_max }}"
    tags:
     - Name: "{{ asg_name }}"
   load_balancers:
      - master: "{{ LoadBalancer }}"
    state: present
  register: asg_result

- debug: var=asg_result

- name: Configure Scaling Policies
  ec2_scaling_policy:
    region: "{{ region }}"
    name: "{{ item.name }}"
    asg_name: "{{ asg_name }}"
    state: present
    adjustment_type: "{{ item.adjustment_type }}"
    min_adjustment_step: "{{ item.min_adjustment_step }}"
    scaling_adjustment: "{{ item.scaling_adjustment }}"
    cooldown: "{{ item.cooldown }}"
  with_items:
    - name: "Increase Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: +1
      min_adjustment_step: 1
      cooldown: 180
    - name: "Decrease Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: -1
      min_adjustment_step: 1
      cooldown: 300
  register: sp_result

- name: Determine Metric Alarm configuration
  set_fact:
    metric_alarms:
      - name: "{{ asg_result.name }}-ScaleUp"
        comparison: ">="
        threshold: 50.0
        alarm_actions:
          - "{{ sp_result.results[0].arn }}"
      - name: "{{ asg_result.name }}-ScaleDown"
        comparison: "<="
        threshold: 20.0
        alarm_actions:
          - "{{ sp_result.results[1].arn }}"

- name: Configure Metric Alarms and link to Scaling Policies
  ec2_metric_alarm:
    region: "{{ region }}"
    name: "{{ item.name }}"
    state: present
    metric: "CPUUtilization"
    namespace: "AWS/EC2"
    statistic: "Average"
    comparison: "{{ item.comparison }}"
    threshold: "{{ item.threshold }}"
    period: 60
    evaluation_periods: 5
    unit: "Percent"
    dimensions:
      AutoScalingGroupName: "{{ asg_result.name }}"
    alarm_actions: "{{ item.alarm_actions }}" 
  with_items: metric_alarms
  when: "{{ asg_result.max_size }} > 1"
  register: ma_result
- name: Create Launch Configuration
  ec2_lc:
    region: "{{ region }}"
    name: "{{ asg_name }}-{{ ansible_date_time.iso8601 | regex_replace('[^a-zA-Z0-9]', '-') }}"
    image_id: "{{ ami.image_id }}"
    key_name: "{{ keypair }}"
    instance_type: "{{ instance_type }}"
    instance_profile_name: "{{ iam_profile }}"
    security_groups: "{{ security_groups }}"
    volumes: "{{ volumes }}"
    instance_monitoring: yes
  register: lc_result

- debug: var=lc_result
  region: ap-southeast-1
  zone: ap-southeast-1a # zone that the master AMI will be configured in
  keypair:
  security_groups: ['SecurityGroup']
  instance_type: t2.micro
  LoadBalancer: ApplicationLoadBalancer
  # specify group_name on the command line with -e group_name=devX
  group_name: test
  instances_min: 2 # minimum number of instances in the auto scaling group
  instances_max: 4 # maximum number of instances in the auto scaling group
  iam_profile: "IAMInstanceProfile"
  volumes:
    - device_name: /dev/sda1
      device_type: gp2
      volume_size: 8 # size of the root disk
      delete_on_termination: true
